@page "/database-test"
@inject IDatabaseManager DatabaseManager
@inject IKillerRepository KillerRepository
@inject ILogger<DatabaseTest> Logger

<div class="database-test-page">
    <div class="page-header">
        <h1>
            <span class="header-icon">🔧</span>
            Database Testing Tools
        </h1>
        <div class="header-actions">
            <button class="btn btn-primary" @onclick="RunFullTest">
                🧪 Run Full Test Suite
            </button>
            <button class="btn btn-secondary" @onclick="ClearAllResults">
                🗑️ Clear Results
            </button>
        </div>
    </div>

    <!-- Quick Actions Section -->
    <div class="test-section">
        <div class="section-header" @onclick="() => ToggleSection(0)">
            <h3>
                <span class="collapse-icon @(_sectionStates[0] ? "expanded" : "")">▶</span>
                Quick Actions
            </h3>
        </div>
        <div class="section-content @(_sectionStates[0] ? "expanded" : "collapsed")">
            <div class="quick-actions-grid">
                <button class="action-card" @onclick="ShowDatabasePath">
                    <div class="action-icon">📍</div>
                    <div class="action-title">Database Location</div>
                    <div class="action-desc">Show current database path</div>
                </button>

                <button class="action-card" @onclick="OpenDatabaseFolder">
                    <div class="action-icon">📁</div>
                    <div class="action-title">Open Folder</div>
                    <div class="action-desc">Open database directory</div>
                </button>

                <button class="action-card" @onclick="TestKillersTable">
                    <div class="action-icon">💀</div>
                    <div class="action-title">Test Killers</div>
                    <div class="action-desc">Run killers table tests</div>
                </button>

                <button class="action-card" @onclick="TestDatabase">
                    <div class="action-icon">🔍</div>
                    <div class="action-title">Full Database</div>
                    <div class="action-desc">Complete database check</div>
                </button>
            </div>
        </div>
    </div>

    <!-- Database Information Section -->
    <div class="test-section">
        <div class="section-header" @onclick="() => ToggleSection(1)">
            <h3>
                <span class="collapse-icon @(_sectionStates[1] ? "expanded" : "")">▶</span>
                Database Information
            </h3>
        </div>
        <div class="section-content @(_sectionStates[1] ? "expanded" : "collapsed")">
            @if (!string.IsNullOrEmpty(_databasePath))
            {
                <div class="database-info-card">
                    <div class="info-row">
                        <span class="info-label">Database Path:</span>
                        <div class="path-display">
                            <code>@_databasePath</code>
                            <button class="btn-small" @onclick="CopyPathToClipboard" title="Copy to clipboard">📋</button>
                        </div>
                    </div>
                    <div class="info-row">
                        <span class="info-label">File Status:</span>
                        <span class="status-badge @(_databaseFileExists ? "success" : "error")">
                            @(_databaseFileExists ? "✅ Exists" : "❌ Missing")
                        </span>
                    </div>
                    @if (_databaseFileExists && _databaseSize > 0)
                    {
                        <div class="info-row">
                            <span class="info-label">File Size:</span>
                            <span class="info-value">@FormatFileSize(_databaseSize)</span>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="empty-state-small">
                    <p>📍 Click "Database Location" to load information</p>
                </div>
            }
        </div>
    </div>

    <!-- Test Results Section -->
    <div class="test-section">
        <div class="section-header" @onclick="() => ToggleSection(2)">
            <h3>
                <span class="collapse-icon @(_sectionStates[2] ? "expanded" : "")">▶</span>
                Test Results
                @if (_testResults.Any())
                {
                    <span class="result-summary">
                        (@_testResults.Count(r => r.Success)/@_testResults.Count passed)
                    </span>
                }
            </h3>
        </div>
        <div class="section-content @(_sectionStates[2] ? "expanded" : "collapsed")">
            @if (_testResults.Any())
            {
                <div class="test-results-container">
                    @foreach (var result in _testResults)
                    {
                        <div class="test-result-card @(result.Success ? "success" : "error")">
                            <div class="result-header">
                                <span class="result-icon">@(result.Success ? "✅" : "❌")</span>
                                <span class="result-title">@result.Test</span>
                            </div>
                            <div class="result-message">@result.Message</div>
                            @if (!string.IsNullOrEmpty(result.Details))
                            {
                                <div class="result-details">
                                    <details>
                                        <summary>View Details</summary>
                                        <pre>@result.Details</pre>
                                    </details>
                                </div>
                            }
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="empty-state-small">
                    <p>🧪 No test results yet. Run tests to see results here.</p>
                </div>
            }
        </div>
    </div>

    <!-- Killers Test Data Section -->
    <div class="test-section">
        <div class="section-header" @onclick="() => ToggleSection(3)">
            <h3>
                <span class="collapse-icon @(_sectionStates[3] ? "expanded" : "")">▶</span>
                Killers Test Data
                @if (_killersTestData.Any())
                {
                    <span class="result-summary">(@_killersTestData.Count killers)</span>
                }
            </h3>
        </div>
        <div class="section-content @(_sectionStates[3] ? "expanded" : "collapsed")">
            @if (_killersTestData.Any())
            {
                <div class="killers-test-grid">
                    @foreach (var killer in _killersTestData.OrderBy(k => k.Name))
                    {
                        <div class="killer-test-card">
                            <div class="killer-name">@killer.Name</div>
                            <div class="killer-cost @(killer.BaseCost == 0 ? "free" : "paid")">
                                @(killer.BaseCost == 0 ? "FREE" : $"{killer.BaseCost:N0}$")
                            </div>
                            <div class="killer-id">@killer.Id[..8]...</div>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="empty-state-small">
                    <p>💀 No killer test data available. Run killer tests to populate this section.</p>
                </div>
            }
        </div>
    </div>
</div>

@code {
    // Section collapse states
    private bool[] _sectionStates = new bool[4] { true, true, false, false }; // Quick Actions e Database Info aperti di default

    // Data
    private List<TestResult> _testResults = new();
    private List<Killer> _killersTestData = new();
    private string? _databasePath = null;
    private bool _databaseFileExists = false;
    private long _databaseSize = 0;

    protected override async Task OnInitializedAsync()
    {
        await ShowDatabasePath();
    }

    private void ToggleSection(int sectionIndex)
    {
        _sectionStates[sectionIndex] = !_sectionStates[sectionIndex];
        StateHasChanged();
    }

    private void ClearAllResults()
    {
        _testResults.Clear();
        _killersTestData.Clear();
        StateHasChanged();
    }

    private async Task RunFullTest()
    {
        _testResults.Clear();
        _killersTestData.Clear();

        // Espandi automaticamente le sezioni dei risultati
        _sectionStates[2] = true; // Test Results
        _sectionStates[3] = true; // Killers Test Data

        await TestDatabase();
    }

    // Metodi esistenti che devi mantenere dal tuo codice originale
    private async Task ShowDatabasePath()
    {
        try
        {
            var connectionString = HardcoreKiller.Infrastructure.Configuration.DatabaseConfiguration.GetConnectionString();
            var builder = new Microsoft.Data.Sqlite.SqliteConnectionStringBuilder(connectionString);
            _databasePath = builder.DataSource;

            _databaseFileExists = File.Exists(_databasePath);

            if (_databaseFileExists)
            {
                var fileInfo = new FileInfo(_databasePath);
                _databaseSize = fileInfo.Length;
            }
            else
            {
                _databaseSize = 0;
            }

            Logger.LogInformation("Database path: {DatabasePath}, Exists: {Exists}, Size: {Size}",
                _databasePath, _databaseFileExists, _databaseSize);

            // Espandi automaticamente la sezione Database Information
            _sectionStates[1] = true;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error getting database path");
            _databasePath = $"Error: {ex.Message}";
        }

        StateHasChanged();
    }

    private async Task TestDatabase()
    {
        _testResults.Clear();
        _killersTestData.Clear();

        try
        {
            // Test 1: Database exists
            var exists = await DatabaseManager.DatabaseExistsAsync();
            _testResults.Add(new TestResult
            {
                Test = "Database File Check",
                Success = exists,
                Message = exists ? "✅ Database file found" : "❌ Database file not found"
            });

            // Test 2: Get version
            var version = await DatabaseManager.GetDatabaseVersionAsync();
            _testResults.Add(new TestResult
            {
                Test = "Database Version",
                Success = version > 0,
                Message = $"Database version: {version}",
                Details = version > 0 ? "Version table accessible" : "Version table not accessible"
            });

            // Test 3: Initialize (should be safe to call multiple times)
            await DatabaseManager.InitializeAsync();
            _testResults.Add(new TestResult
            {
                Test = "Database Initialize",
                Success = true,
                Message = "✅ Initialize completed without errors"
            });

            // Test 4: Killers table tests
            await TestKillersTableInternal();

            // Aggiorna le informazioni del file
            await ShowDatabasePath();

        }
        catch (Exception ex)
        {
            _testResults.Add(new TestResult
            {
                Test = "Database Test",
                Success = false,
                Message = $"❌ Critical Error: {ex.Message}",
                Details = ex.StackTrace
            });

            Logger.LogError(ex, "Database test failed");
        }

        StateHasChanged();
    }

    private async Task TestKillersTable()
    {
        _testResults.Clear();
        _killersTestData.Clear();

        await TestKillersTableInternal();

        // Espandi automaticamente le sezioni dei risultati
        _sectionStates[2] = true;
        _sectionStates[3] = true;

        StateHasChanged();
    }

    private async Task TestKillersTableInternal()
    {
        try
        {
            // Test 1: Get all killers
            var getAllResult = await KillerRepository.GetAllAsync();
            _testResults.Add(new TestResult
            {
                Test = "Killers - Get All",
                Success = getAllResult.IsSuccess,
                Message = getAllResult.IsSuccess
                    ? $"✅ Retrieved {((IEnumerable<Killer>)getAllResult.Value!).Count()} killers"
                    : $"❌ Error: {getAllResult.Error}",
                Details = getAllResult.IsSuccess ? "Killers table accessible" : getAllResult.Error
            });

            // Test 2: Create test killer
            var testKiller = Killer.Create("Test Killer", 25);
            var createResult = await KillerRepository.CreateAsync(testKiller);
            _testResults.Add(new TestResult
            {
                Test = "Killers - Create",
                Success = createResult.IsSuccess,
                Message = createResult.IsSuccess
                    ? $"✅ Created killer: {createResult.Value!.Name}"
                    : $"❌ Create failed: {createResult.Error}",
                Details = createResult.IsSuccess ? $"ID: {createResult.Value!.Id}" : createResult.Error
            });

            if (createResult.IsSuccess)
            {
                var createdKiller = createResult.Value!;

                // Test 3: Get by ID
                var getByIdResult = await KillerRepository.GetByIdAsync(createdKiller.Id);
                _testResults.Add(new TestResult
                {
                    Test = "Killers - Get By ID",
                    Success = getByIdResult.IsSuccess,
                    Message = getByIdResult.IsSuccess
                        ? $"✅ Retrieved killer: {getByIdResult.Value!.Name}"
                        : $"❌ Get failed: {getByIdResult.Error}",
                    Details = getByIdResult.IsSuccess ? $"Cost: {getByIdResult.Value!.BaseCost}" : getByIdResult.Error
                });

                // Test 4: Update killer
                createdKiller.UpdateName("Updated Test Killer");
                createdKiller.UpdateBaseCost(50);
                var updateResult = await KillerRepository.UpdateAsync(createdKiller);
                _testResults.Add(new TestResult
                {
                    Test = "Killers - Update",
                    Success = updateResult.IsSuccess,
                    Message = updateResult.IsSuccess
                        ? $"✅ Updated killer: {updateResult.Value!.Name}"
                        : $"❌ Update failed: {updateResult.Error}",
                    Details = updateResult.IsSuccess ? $"New cost: {updateResult.Value!.BaseCost}" : updateResult.Error
                });

                // Test 5: Exists check
                var existsResult = await KillerRepository.ExistsAsync(createdKiller.Id);
                _testResults.Add(new TestResult
                {
                    Test = "Killers - Exists Check",
                    Success = existsResult.IsSuccess && existsResult.Value == true,
                    Message = existsResult.IsSuccess
                        ? (existsResult.Value == true ? "✅ Killer exists" : "❌ Killer not found")
                        : $"❌ Exists check failed: {existsResult.Error}",
                    Details = existsResult.IsSuccess ? "Exists method working correctly" : existsResult.Error
                });

                // Test 6: Name exists check
                var nameExistsResult = await KillerRepository.ExistsByNameAsync(createdKiller.Name);
                _testResults.Add(new TestResult
                {
                    Test = "Killers - Name Exists Check",
                    Success = nameExistsResult.IsSuccess && nameExistsResult.Value == true,
                    Message = nameExistsResult.IsSuccess
                        ? (nameExistsResult.Value == true ? "✅ Name exists" : "❌ Name not found")
                        : $"❌ Name exists check failed: {nameExistsResult.Error}",
                    Details = nameExistsResult.IsSuccess ? "Name uniqueness check working" : nameExistsResult.Error
                });

                // Final count
                var finalGetAllResult = await KillerRepository.GetAllAsync();
                if (finalGetAllResult.IsSuccess)
                {
                    var allKillers = (IEnumerable<Killer>)finalGetAllResult.Value!;
                    var killersList = allKillers.ToList();
                    _killersTestData.Clear();
                    _killersTestData.AddRange(killersList);

                    _testResults.Add(new TestResult
                    {
                        Test = "Killers - Final Count",
                        Success = true,
                        Message = $"✅ Total killers in database: {killersList.Count}",
                        Details = "All CRUD operations working correctly"
                    });
                }
            }
        }
        catch (Exception ex)
        {
            _testResults.Add(new TestResult
            {
                Test = "Killers Table Test",
                Success = false,
                Message = $"❌ Critical Error: {ex.Message}",
                Details = ex.StackTrace
            });

            Logger.LogError(ex, "Killers table test failed");
        }
    }

    private async Task OpenDatabaseFolder()
    {
        try
        {
            if (!string.IsNullOrEmpty(_databasePath))
            {
                var directory = Path.GetDirectoryName(_databasePath);
                if (!string.IsNullOrEmpty(directory))
                {
                    System.Diagnostics.Process.Start("explorer.exe", directory);
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error opening database folder");
        }
    }

    private async Task CopyPathToClipboard()
    {
        try
        {
            if (!string.IsNullOrEmpty(_databasePath))
            {
                Logger.LogInformation("Database path copied: {Path}", _databasePath);
                // In un'app desktop potresti implementare il copy via interop o altre librerie
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error copying path to clipboard");
        }
    }

    private static string FormatFileSize(long bytes)
    {
        if (bytes < 1024) return $"{bytes} bytes";
        if (bytes < 1024 * 1024) return $"{bytes / 1024:F1} KB";
        return $"{bytes / (1024 * 1024):F1} MB";
    }

    private class TestResult
    {
        public string Test { get; set; } = "";
        public bool Success { get; set; }
        public string Message { get; set; } = "";
        public string? Details { get; set; }
    }
}